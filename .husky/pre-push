#!/usr/bin/env sh

echo "üîç TypeScript type checking..."
npm run type-check

if [ $? -ne 0 ]; then
  echo "‚ùå TypeScript errors found. Please fix them before pushing."
  exit 1
fi

echo "‚úÖ TypeScript check passed!"

# Get current branch name
CURRENT_BRANCH=$(git branch --show-current)
REMOTE_BRANCH="origin/$CURRENT_BRANCH"

# Check if remote branch exists
if git ls-remote --heads origin "$CURRENT_BRANCH" | grep -q "$CURRENT_BRANCH"; then
  # Compare with remote branch
  CHANGED_FILES=$(git diff --name-only "$REMOTE_BRANCH"...HEAD | grep -E '\.(js|jsx|ts|tsx)$' | grep -v -E '\.(test|spec)\.(js|jsx|ts|tsx)$' | tr '\n' ' ')
else
  # If remote branch doesn't exist, compare with main
  CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E '\.(js|jsx|ts|tsx)$' | grep -v -E '\.(test|spec)\.(js|jsx|ts|tsx)$' | tr '\n' ' ')
fi

if [ -n "$CHANGED_FILES" ]; then
  echo "üîç Running tests for changed files:"
  echo "$CHANGED_FILES" | tr ' ' '\n' | awk -F'/' '{
    path=""
    for(i=1; i<NF; i++) {
      if(path=="") path=$i
      else path=path"/"$i
      if(!seen[path]) {
        indent=""
        for(j=1; j<i; j++) indent=indent"  "
        print indent"üìÅ " path
        seen[path]=1
      }
    }
    indent=""
    for(j=1; j<NF; j++) indent=indent"  "
    print indent"  üìÑ " $NF
  }'
  echo ""
  
  echo "üß™ Running Jest tests for related files..."
  npx jest --bail --findRelatedTests --passWithNoTests $CHANGED_FILES
  
  if [ $? -ne 0 ]; then
    echo "‚ùå Tests failed. Please fix them before pushing."
    exit 1
  fi
  
  echo "‚úÖ All tests passed!"
else
  echo "‚ÑπÔ∏è  No TypeScript/JavaScript files changed, skipping tests"
fi 